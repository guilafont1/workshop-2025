from typing import Dict, Any, List, Tuple
import json, os, time
from game.utils import sha256_hex, b64_decode
from cryptography.fernet import Fernet

DATA_DIR = os.path.join(os.path.dirname(os.path.dirname(__file__)), "data")

# --------- ROOM 1: TROUVE LE RYTHME DU C≈íUR ü´Ä ---------
# Calculer le rythme cardiaque moyen des patients de 68-72 ans
def room1_get_patients_data() -> Dict[str, Any]:
    """Retourne les donn√©es des patients pour l'√©preuve BPM"""
    return {
        "patients": [
            {"nom": "Alice", "age": 68, "bpm": 72, "commentaire": "Patient stable depuis ce matin. A pris ses m√©dicaments √† 8h comme d'habitude. Tension art√©rielle normale (12/8). Toujours calme et coop√©rative. Aucune plainte particuli√®re. Sommeil r√©parateur cette nuit."},
            {"nom": "Bob", "age": 70, "bpm": 76, "commentaire": "Excellent moral aujourd'hui ! A bien mang√© au petit-d√©jeuner. Glyc√©mie stable √† 1.2g/L. Toujours souriant avec le personnel soignant. A fait quelques pas dans le couloir ce matin. Famille venue hier soir."},
            {"nom": "Clara", "age": 71, "bpm": 74, "commentaire": "Respiration un peu courte apr√®s effort. A besoin de pauses fr√©quentes pour les activit√©s. Oxyg√©nation correcte au repos (98%). Se fatigue vite mais garde le moral. Kin√©sith√©rapie programm√©e cet apr√®s-midi."},
            {"nom": "Daniel", "age": 69, "bpm": 70, "commentaire": "Nuit agit√©e, s'est endormi tard vers 23h30. Traitement pour l'insomnie ajust√©. Endormi souvent dans la journ√©e, probablement rattrapant le sommeil. Pas de fi√®vre. Constantes stables malgr√© la fatigue."},
            {"nom": "Emma", "age": 70, "bpm": 78, "commentaire": "Tr√®s dynamique ce matin ! A particip√© √† toutes les activit√©s de r√©√©ducation. App√©tit excellent, a termin√© tous ses repas. Toujours active et motiv√©e pour les soins. Demande √† sortir se promener dans le jardin."},
            {"nom": "F√©lix", "age": 72, "bpm": 80, "commentaire": "Patient agit√©, ne tient pas en place. A d√©j√† fait 3 tours du service ce matin. Hyperactif comme d'habitude. Bouge beaucoup les mains quand il parle. Attention aux chutes, surveillance renforc√©e demand√©e."},
            {"nom": "G√©rard", "age": 70, "bpm": 74, "commentaire": "Humeur excellente aujourd'hui ! Raconte des blagues au personnel. Patient joyeux qui remonte le moral de ses voisins de chambre. A bien dormi. Visite de sa petite-fille pr√©vue cet apr√®s-midi."},
            {"nom": "Hannah", "age": 69, "bpm": 71, "commentaire": "Patiente tr√®s zen aujourd'hui. M√©ditation matinale effectu√©e avec succ√®s. Calme et souriante avec tout le monde. Tension art√©rielle parfaite. Pratique ses exercices de respiration r√©guli√®rement."}
        ],
        "age_range": (68, 72),
        "correct_answer": 74,  # Moyenne des BPM des patients 68-72 ans
        "calculation": "Patients 68-72 ans: 72+76+74+70+78+80+74+71 = 595, 595/8 = 74 bpm"
    }

def room1_check_bpm(user_bpm: int) -> bool:
    """Valide si le BPM calcul√© est correct"""
    data = room1_get_patients_data()
    return user_bpm == data["correct_answer"]

# --------- ROOM 2: LE BON M√âDICAMENT üíä ---------
# Puzzle complexe avec interactions m√©dicamenteuses et contraintes
def room2_get_prescription_data() -> Dict[str, Any]:
    """Retourne les donn√©es pour l'√©preuve des m√©dicaments complexe"""
    return {
        "patients": [
            {
                "nom": "Alice", 
                "age": 45,
                "symptomes": ["Fi√®vre 38.5¬∞C", "Maux de t√™te", "Fatigue"],
                "allergies": ["Aspirine"],
                "traitements_actuels": ["Vitamine D"],
                "historique": "Hypertension contr√¥l√©e depuis 2 ans"
            },
            {
                "nom": "Bob", 
                "age": 67,
                "symptomes": ["Douleur articulaire genou", "Raideur matinale"],
                "allergies": ["Aucune"],
                "traitements_actuels": ["Anticoagulant (Warfarine)"],
                "historique": "Risque h√©morragique √©lev√©"
            },
            {
                "nom": "Clara", 
                "age": 32,
                "symptomes": ["Toux s√®che persistante", "Gorge irrit√©e"],
                "allergies": ["Cod√©ine"],
                "traitements_actuels": ["Pilule contraceptive"],
                "historique": "Enceinte de 6 semaines (d√©couvert ce matin)"
            },
            {
                "nom": "Daniel", 
                "age": 29,
                "symptomes": ["Fatigue extr√™me", "Difficult√©s concentration"],
                "allergies": ["P√©nicilline"],
                "traitements_actuels": ["Antid√©presseur (Sertraline)"],
                "historique": "D√©pression en cours de traitement"
            },
            {
                "nom": "Emma", 
                "age": 55,
                "symptomes": ["Migraine s√©v√®re", "Naus√©es", "Photophobie"],
                "allergies": ["Aucune"],
                "traitements_actuels": ["Aucun"],
                "historique": "Premi√®re crise de migraine"
            }
        ],
        "medicaments_disponibles": [
            {
                "nom": "Parac√©tamol",
                "indications": ["Fi√®vre", "Douleur l√©g√®re", "Maux de t√™te"],
                "contre_indications": ["Insuffisance h√©patique s√©v√®re"],
                "interactions": [],
                "grossesse": "Autoris√©"
            },
            {
                "nom": "Ibuprof√®ne", 
                "indications": ["Douleur", "Inflammation", "Fi√®vre"],
                "contre_indications": ["Anticoagulants", "Grossesse 3e trimestre"],
                "interactions": ["Anticoagulant"],
                "grossesse": "√âviter"
            },
            {
                "nom": "Aspirine",
                "indications": ["Douleur", "Fi√®vre", "Anti-agr√©gant"],
                "contre_indications": ["Allergie", "Anticoagulants", "Enfants"],
                "interactions": ["Anticoagulant"],
                "grossesse": "Contre-indiqu√©"
            },
            {
                "nom": "Sirop antitussif",
                "indications": ["Toux s√®che"],
                "contre_indications": ["Allergie cod√©ine"],
                "interactions": [],
                "grossesse": "Autoris√© avec pr√©caution"
            },
            {
                "nom": "Complexe vitamin√© B",
                "indications": ["Fatigue", "Stress", "D√©pression"],
                "contre_indications": [],
                "interactions": [],
                "grossesse": "Autoris√©"
            },
            {
                "nom": "Sumatriptan",
                "indications": ["Migraine s√©v√®re"],
                "contre_indications": ["Hypertension", "Grossesse"],
                "interactions": ["Antid√©presseurs ISRS"],
                "grossesse": "Contre-indiqu√©"
            }
        ],
        "indices": [
            "‚ö†Ô∏è V√©rifiez TOUJOURS les allergies avant de prescrire",
            "üíä Les anticoagulants (Warfarine) sont incompatibles avec Aspirine et Ibuprof√®ne",
            "ü§∞ Clara est enceinte : √©vitez les m√©dicaments contre-indiqu√©s",
            "üß† Les antid√©presseurs ISRS (Sertraline) interagissent avec le Sumatriptan",
            "üí° Le Parac√©tamol est souvent le choix le plus s√ªr pour la fi√®vre",
            "üîç Parfois, plusieurs m√©dicaments peuvent traiter le m√™me sympt√¥me"
        ],
        "solution": {
            "Alice": "Parac√©tamol",        # Fi√®vre + maux de t√™te, √©viter Aspirine (allergie)
            "Bob": "Parac√©tamol",          # Douleur, √©viter AINS (anticoagulant)
            "Clara": "Sirop antitussif",   # Toux, enceinte donc attention aux contre-indications
            "Daniel": "Complexe vitamin√© B", # Fatigue, √©viter Sumatriptan (interaction ISRS)
            "Emma": "Parac√©tamol"          # Migraine, √©viter Sumatriptan (premi√®re crise)
        },
        "explanations": {
            "Alice": "Parac√©tamol pour la fi√®vre (allergie √† l'Aspirine)",
            "Bob": "Parac√©tamol car les AINS sont contre-indiqu√©s avec les anticoagulants",
            "Clara": "Sirop antitussif compatible grossesse (pas de cod√©ine)",
            "Daniel": "Vitamines B pour la fatigue (Sumatriptan interagit avec antid√©presseurs)",
            "Emma": "Parac√©tamol pour d√©buter (√©viter Sumatriptan en premi√®re intention)"
        }
    }

def room2_validate_prescriptions(prescriptions: Dict[str, str]) -> Tuple[bool, str]:
    """Valide les prescriptions des m√©dicaments avec logique complexe"""
    data = room2_get_prescription_data()
    solution = data["solution"]
    explanations = data["explanations"]
    
    errors = []
    
    for patient_name, prescribed_med in prescriptions.items():
        if patient_name not in solution:
            return False, f"Patient {patient_name} inconnu"
        
        # Trouver les donn√©es du patient
        patient = next(p for p in data["patients"] if p["nom"] == patient_name)
        
        # Trouver les infos du m√©dicament prescrit
        med_info = next((m for m in data["medicaments_disponibles"] if m["nom"] == prescribed_med), None)
        if not med_info:
            errors.append(f"{patient_name}: M√©dicament '{prescribed_med}' non disponible")
            continue
        
        # V√©rifier les allergies
        if prescribed_med in [allergy for allergy in patient["allergies"]]:
            errors.append(f"{patient_name}: Allergie √† {prescribed_med} !")
            continue
        
        # V√©rifier les interactions avec traitements actuels
        for traitement in patient["traitements_actuels"]:
            if "Anticoagulant" in traitement and prescribed_med in ["Aspirine", "Ibuprof√®ne"]:
                errors.append(f"{patient_name}: {prescribed_med} interagit avec {traitement}")
                continue
            if "Sertraline" in traitement and prescribed_med == "Sumatriptan":
                errors.append(f"{patient_name}: Interaction dangereuse Sumatriptan + antid√©presseur")
                continue
        
        # V√©rifier grossesse pour Clara
        if patient_name == "Clara" and prescribed_med in ["Ibuprof√®ne", "Aspirine", "Sumatriptan"]:
            errors.append(f"{patient_name}: {prescribed_med} contre-indiqu√© pendant la grossesse")
            continue
        
        # V√©rifier si le m√©dicament traite les sympt√¥mes
        patient_symptoms_keywords = " ".join(patient["symptomes"]).lower()
        med_indications = " ".join(med_info["indications"]).lower()
        
        symptom_match = False
        if "fi√®vre" in patient_symptoms_keywords and any(x in med_indications for x in ["fi√®vre", "douleur"]):
            symptom_match = True
        elif "douleur" in patient_symptoms_keywords and "douleur" in med_indications:
            symptom_match = True
        elif "toux" in patient_symptoms_keywords and "toux" in med_indications:
            symptom_match = True
        elif "fatigue" in patient_symptoms_keywords and any(x in med_indications for x in ["fatigue", "stress"]):
            symptom_match = True
        elif "migraine" in patient_symptoms_keywords and any(x in med_indications for x in ["migraine", "douleur"]):
            symptom_match = True
        elif "maux de t√™te" in patient_symptoms_keywords and any(x in med_indications for x in ["douleur", "maux"]):
            symptom_match = True
        
        if not symptom_match:
            errors.append(f"{patient_name}: {prescribed_med} ne traite pas les sympt√¥mes pr√©sents")
    
    if errors:
        return False, "Erreurs d√©tect√©es:\n‚Ä¢ " + "\n‚Ä¢ ".join(errors[:3])  # Limite √† 3 erreurs pour lisibilit√©
    
    # V√©rifier si c'est exactement la solution optimale
    correct_count = sum(1 for name, med in prescriptions.items() if med == solution.get(name))
    total = len(solution)
    
    if correct_count == total:
        return True, "üéâ Prescriptions parfaites ! Tous les patients sont trait√©s de mani√®re optimale."
    elif correct_count >= total * 0.8:  # 80% de bonnes r√©ponses
        return True, f"‚úÖ Prescriptions acceptables ({correct_count}/{total} optimales). Patients trait√©s en s√©curit√©."
    else:
        return False, f"Prescriptions sous-optimales ({correct_count}/{total}). R√©visez les contre-indications et interactions."
    
# --------- ROOM 3: HYDRATATION ET TEMP√âRATURE üå°Ô∏èüíß ---------
# Puzzle complexe avec calculs, graphiques et monitoring patients
def room3_get_hydration_data() -> Dict[str, Any]:
    """Retourne les donn√©es pour l'√©preuve hydratation/temp√©rature complexe"""
    patients_data = [
        {
            "nom": "Alice",
            "age": 34,
            "poids": 65,
            "temperature": 38.8,
            "facteur_fievre": 950,  # (38.8-37) * 500 = 950ml
            "pathologie": "Grippe saisonni√®re",
            "hydratation_actuelle": 1.2
        },
        {
            "nom": "Bob",
            "age": 72,
            "poids": 78,
            "temperature": 39.4,
            "facteur_fievre": 1200,  # (39.4-37) * 500 = 1200ml
            "pathologie": "Insuffisance cardiaque",
            "hydratation_actuelle": 0.9
        },
        {
            "nom": "Clara",
            "age": 28,
            "poids": 58,
            "temperature": 37.1,
            "facteur_fievre": 0,  # Temp√©rature normale
            "pathologie": "Diab√®te",
            "hydratation_actuelle": 2.2
        },
        {
            "nom": "Daniel",
            "age": 45,
            "poids": 85,
            "temperature": 40.1,
            "facteur_fievre": 1550,  # (40.1-37) * 500 = 1550ml
            "pathologie": "Infection",
            "hydratation_actuelle": 1.1
        },
        {
            "nom": "Emma",
            "age": 19,
            "poids": 52,
            "temperature": 36.7,
            "facteur_fievre": 0,  # Temp√©rature normale
            "pathologie": "Diab√®te",
            "hydratation_actuelle": 1.8
        }
    ]

    return {
        "patients": patients_data,
        "options_calcul": [1.0, 1.5, 2.0, 2.5, 2.8, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0],
        "r√®gles": {
            "36.1-37.2¬∞C": "Temp√©rature normale, hydratation standard",
            "37.3-38.0¬∞C": "Temp√©rature l√©g√®rement √©lev√©e",
            "38.1-39.0¬∞C": "Fi√®vre mod√©r√©e, augmenter l'hydratation",
            "39.1-40.0¬∞C": "Forte fi√®vre, hydratation intensive requise"
        }
    }

def room3_validate_hydration(hydration_choices: Dict[str, float]) -> Tuple[bool, str]:
    """Valide les choix d'hydratation avec calculs m√©dicaux"""
    # Solutions attendues bas√©es sur les calculs m√©dicaux
    solutions = {
        "Alice": 2.8,    # 65kg √ó 30ml = 1950ml + fi√®vre (950ml) = 2900ml ‚âà 2.9L, ajust√© √† 2.8L
        "Bob": 4.5,      # 78kg √ó 30ml = 2340ml + fi√®vre (1200ml) + √¢ge (-10%) + insuffisance cardiaque (-20%) ‚âà 4.5L
        "Clara": 2.8,    # 58kg √ó 30ml = 1740ml + diab√®te (+10%) = 1914ml ‚âà 1.9L, mais ajust√© pour diab√®te
        "Daniel": 6.5,   # 85kg √ó 30ml = 2550ml + fi√®vre (1550ml) + infection (+15%) ‚âà 6.5L
        "Emma": 2.5       # 52kg √ó 30ml = 1560ml + diab√®te (+10%) ‚âà 1.7L, ajust√©
    }

    correct_count = 0
    total_patients = len(solutions)
    tolerance = 0.3  # Tol√©rance de ¬±0.3L

    results = []

    for patient_name, prescribed_hydration in hydration_choices.items():
        if patient_name not in solutions:
            return False, f"Patient {patient_name} inconnu"

        expected_hydration = solutions[patient_name]

        if abs(prescribed_hydration - expected_hydration) <= tolerance:
            correct_count += 1
            results.append(f"‚úÖ {patient_name}: {prescribed_hydration}L correct")
        else:
            results.append(f"‚ùå {patient_name}: {prescribed_hydration}L (attendu: {expected_hydration}L)")

    success_rate = correct_count / total_patients

    if success_rate == 1.0:
        return True, "üéâ Parfait ! Tous les patients sont correctement hydrat√©s."
    elif success_rate >= 0.8:
        return True, f"‚úÖ Prescriptions acceptables ({correct_count}/{total_patients} correctes)."
    else:
        return False, f"Calculs insuffisants ({correct_count}/{total_patients}). Utilisez la calculatrice m√©dicale."
    
def room3_get_calculation_hints() -> Dict[str, str]:
    """Retourne les indices de calcul d√©taill√©s"""
    return {
        "etape1": "1Ô∏è‚É£ Calculer besoins de base: Poids √ó 30-35 mL/kg",
        "etape2": "2Ô∏è‚É£ Ajouter suppl√©ment fi√®vre: (Temp-37¬∞C) √ó 500mL",
        "etape3": "3Ô∏è‚É£ Correction √¢ge: +15% si >65 ans",
        "etape4": "4Ô∏è‚É£ Correction pathologie: Diab√®te insipide +60%, Sepsis +50%",
        "etape5": "5Ô∏è‚É£ V√©rifier avec diur√®se: Normal = 1500-2000mL/24h"
    }

# --------- ROOM 4: NETWORK ORDER (COOP) ---------
# Players must activate ports in the exact order: 443 -> 22 -> 80
EXPECTED_PORT_SEQ = ["443", "22", "80"]

def room4_validate_sequence(seq: List[str]) -> Tuple[bool, str]:
    if seq == EXPECTED_PORT_SEQ:
        return True, "Pare-feux synchronis√©s !"
    return False, "Mauvais ordre. Indice: 'HTTPS avant SSH avant HTTP'."

# --------- ROOM 5: FINAL QUIZ WITH TIMER ---------
FINAL_QUESTIONS = [
    ("Quel encodage transforme 'texte' en caract√®res s√ªrs pour transport?", ["base64", "sha256", "utf-32"], "base64"),
    ("Quel algorithme est un HACHAGE (non r√©versible)?", ["AES", "SHA-256", "Fernet"], "SHA-256"),
    ("Dans un h√¥pital, quelle donn√©e NE doit PAS √™tre stock√©e en clair?", ["Nom de la ville", "Identifiant patient", "Liste des couleurs"], "Identifiant patient"),
]

def room5_check_answers(answers: List[str], start_ts: int, now_ts: int) -> Tuple[bool, str]:
    # Must finish under 180 seconds
    if start_ts is None or (now_ts - start_ts) > 180:
        return False, "Temps d√©pass√© (3 minutes)."
    if len(answers) != len(FINAL_QUESTIONS):
        return False, "Toutes les r√©ponses doivent √™tre fournies."
    for (q, options, expected), ans in zip(FINAL_QUESTIONS, answers):
        if ans != expected:
            return False, f"Mauvaise r√©ponse pour: {q}"
    return True, "Syst√®me red√©marr√© !"
