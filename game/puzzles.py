from typing import Dict, Any, List, Tuple
import json, os, time
from game.utils import sha256_hex, b64_decode
from cryptography.fernet import Fernet

DATA_DIR = os.path.join(os.path.dirname(os.path.dirname(__file__)), "data")

# --------- ROOM 1: TROUVE LE RYTHME DU C≈íUR ü´Ä ---------
# Calculer le rythme cardiaque moyen des patients de 68-72 ans
def room1_get_patients_data() -> Dict[str, Any]:
    """Retourne les donn√©es des patients pour l'√©preuve BPM"""
    return {
        "patients": [
            {"nom": "Alice", "age": 68, "bpm": 72, "commentaire": "Patient stable depuis ce matin. A pris ses m√©dicaments √† 8h comme d'habitude. Tension art√©rielle normale (12/8). Toujours calme et coop√©rative. Aucune plainte particuli√®re. Sommeil r√©parateur cette nuit."},
            {"nom": "Bob", "age": 70, "bpm": 76, "commentaire": "Excellent moral aujourd'hui ! A bien mang√© au petit-d√©jeuner. Glyc√©mie stable √† 1.2g/L. Toujours souriant avec le personnel soignant. A fait quelques pas dans le couloir ce matin. Famille venue hier soir."},
            {"nom": "Clara", "age": 71, "bpm": 74, "commentaire": "Respiration un peu courte apr√®s effort. A besoin de pauses fr√©quentes pour les activit√©s. Oxyg√©nation correcte au repos (98%). Se fatigue vite mais garde le moral. Kin√©sith√©rapie programm√©e cet apr√®s-midi."},
            {"nom": "Daniel", "age": 69, "bpm": 70, "commentaire": "Nuit agit√©e, s'est endormi tard vers 23h30. Traitement pour l'insomnie ajust√©. Endormi souvent dans la journ√©e, probablement rattrapant le sommeil. Pas de fi√®vre. Constantes stables malgr√© la fatigue."},
            {"nom": "Emma", "age": 70, "bpm": 78, "commentaire": "Tr√®s dynamique ce matin ! A particip√© √† toutes les activit√©s de r√©√©ducation. App√©tit excellent, a termin√© tous ses repas. Toujours active et motiv√©e pour les soins. Demande √† sortir se promener dans le jardin."},
            {"nom": "F√©lix", "age": 72, "bpm": 80, "commentaire": "Patient agit√©, ne tient pas en place. A d√©j√† fait 3 tours du service ce matin. Hyperactif comme d'habitude. Bouge beaucoup les mains quand il parle. Attention aux chutes, surveillance renforc√©e demand√©e."},
            {"nom": "G√©rard", "age": 70, "bpm": 74, "commentaire": "Humeur excellente aujourd'hui ! Raconte des blagues au personnel. Patient joyeux qui remonte le moral de ses voisins de chambre. A bien dormi. Visite de sa petite-fille pr√©vue cet apr√®s-midi."},
            {"nom": "Hannah", "age": 69, "bpm": 71, "commentaire": "Patiente tr√®s zen aujourd'hui. M√©ditation matinale effectu√©e avec succ√®s. Calme et souriante avec tout le monde. Tension art√©rielle parfaite. Pratique ses exercices de respiration r√©guli√®rement."}
        ],
        "age_range": (68, 72),
        "correct_answer": 74,  # Moyenne des BPM des patients 68-72 ans
        "calculation": "Patients 68-72 ans: 72+76+74+70+78+80+74+71 = 595, 595/8 = 74 bpm"
    }

def room1_check_bpm(user_bpm: int) -> bool:
    """Valide si le BPM calcul√© est correct"""
    data = room1_get_patients_data()
    return user_bpm == data["correct_answer"]

# --------- ROOM 2: LE BON M√âDICAMENT üíä ---------
# Puzzle complexe avec interactions m√©dicamenteuses et contraintes
def room2_get_prescription_data() -> Dict[str, Any]:
    """Retourne les donn√©es pour l'√©preuve des m√©dicaments complexe"""
    return {
        "patients": [
            {
                "nom": "Alice", 
                "age": 45,
                "symptomes": ["Fi√®vre 38.5¬∞C", "Maux de t√™te", "Fatigue"],
                "allergies": ["Aspirine"],
                "traitements_actuels": ["Vitamine D"],
                "historique": "Hypertension contr√¥l√©e depuis 2 ans"
            },
            {
                "nom": "Bob", 
                "age": 67,
                "symptomes": ["Douleur articulaire genou", "Raideur matinale"],
                "allergies": ["Aucune"],
                "traitements_actuels": ["Anticoagulant (Warfarine)"],
                "historique": "Risque h√©morragique √©lev√©"
            },
            {
                "nom": "Clara", 
                "age": 32,
                "symptomes": ["Toux s√®che persistante", "Gorge irrit√©e"],
                "allergies": ["Cod√©ine"],
                "traitements_actuels": ["Pilule contraceptive"],
                "historique": "Enceinte de 6 semaines (d√©couvert ce matin)"
            },
            {
                "nom": "Daniel", 
                "age": 29,
                "symptomes": ["Fatigue extr√™me", "Difficult√©s concentration"],
                "allergies": ["P√©nicilline"],
                "traitements_actuels": ["Antid√©presseur (Sertraline)"],
                "historique": "D√©pression en cours de traitement"
            },
            {
                "nom": "Emma", 
                "age": 55,
                "symptomes": ["Migraine s√©v√®re", "Naus√©es", "Photophobie"],
                "allergies": ["Aucune"],
                "traitements_actuels": ["Aucun"],
                "historique": "Premi√®re crise de migraine"
            }
        ],
        "medicaments_disponibles": [
            {
                "nom": "Parac√©tamol",
                "indications": ["Fi√®vre", "Douleur l√©g√®re", "Maux de t√™te"],
                "contre_indications": ["Insuffisance h√©patique s√©v√®re"],
                "interactions": [],
                "grossesse": "Autoris√©"
            },
            {
                "nom": "Ibuprof√®ne", 
                "indications": ["Douleur", "Inflammation", "Fi√®vre"],
                "contre_indications": ["Anticoagulants", "Grossesse 3e trimestre"],
                "interactions": ["Anticoagulant"],
                "grossesse": "√âviter"
            },
            {
                "nom": "Aspirine",
                "indications": ["Douleur", "Fi√®vre", "Anti-agr√©gant"],
                "contre_indications": ["Allergie", "Anticoagulants", "Enfants"],
                "interactions": ["Anticoagulant"],
                "grossesse": "Contre-indiqu√©"
            },
            {
                "nom": "Sirop antitussif",
                "indications": ["Toux s√®che"],
                "contre_indications": ["Allergie cod√©ine"],
                "interactions": [],
                "grossesse": "Autoris√© avec pr√©caution"
            },
            {
                "nom": "Complexe vitamin√© B",
                "indications": ["Fatigue", "Stress", "D√©pression"],
                "contre_indications": [],
                "interactions": [],
                "grossesse": "Autoris√©"
            },
            {
                "nom": "Sumatriptan",
                "indications": ["Migraine s√©v√®re"],
                "contre_indications": ["Hypertension", "Grossesse"],
                "interactions": ["Antid√©presseurs ISRS"],
                "grossesse": "Contre-indiqu√©"
            }
        ],
        "indices": [
            "‚ö†Ô∏è V√©rifiez TOUJOURS les allergies avant de prescrire",
            "üíä Les anticoagulants (Warfarine) sont incompatibles avec Aspirine et Ibuprof√®ne",
            "ü§∞ Clara est enceinte : √©vitez les m√©dicaments contre-indiqu√©s",
            "üß† Les antid√©presseurs ISRS (Sertraline) interagissent avec le Sumatriptan",
            "üí° Le Parac√©tamol est souvent le choix le plus s√ªr pour la fi√®vre",
            "üîç Parfois, plusieurs m√©dicaments peuvent traiter le m√™me sympt√¥me"
        ],
        "solution": {
            "Alice": "Parac√©tamol",        # Fi√®vre + maux de t√™te, √©viter Aspirine (allergie)
            "Bob": "Parac√©tamol",          # Douleur, √©viter AINS (anticoagulant)
            "Clara": "Sirop antitussif",   # Toux, enceinte donc attention aux contre-indications
            "Daniel": "Complexe vitamin√© B", # Fatigue, √©viter Sumatriptan (interaction ISRS)
            "Emma": "Parac√©tamol"          # Migraine, √©viter Sumatriptan (premi√®re crise)
        },
        "explanations": {
            "Alice": "Parac√©tamol pour la fi√®vre (allergie √† l'Aspirine)",
            "Bob": "Parac√©tamol car les AINS sont contre-indiqu√©s avec les anticoagulants",
            "Clara": "Sirop antitussif compatible grossesse (pas de cod√©ine)",
            "Daniel": "Vitamines B pour la fatigue (Sumatriptan interagit avec antid√©presseurs)",
            "Emma": "Parac√©tamol pour d√©buter (√©viter Sumatriptan en premi√®re intention)"
        }
    }

def room2_validate_prescriptions(prescriptions: Dict[str, str]) -> Tuple[bool, str]:
    """Valide les prescriptions des m√©dicaments avec logique complexe"""
    data = room2_get_prescription_data()
    solution = data["solution"]
    explanations = data["explanations"]
    
    errors = []
    
    for patient_name, prescribed_med in prescriptions.items():
        if patient_name not in solution:
            return False, f"Patient {patient_name} inconnu"
        
        # Trouver les donn√©es du patient
        patient = next(p for p in data["patients"] if p["nom"] == patient_name)
        
        # Trouver les infos du m√©dicament prescrit
        med_info = next((m for m in data["medicaments_disponibles"] if m["nom"] == prescribed_med), None)
        if not med_info:
            errors.append(f"{patient_name}: M√©dicament '{prescribed_med}' non disponible")
            continue
        
        # V√©rifier les allergies
        if prescribed_med in [allergy for allergy in patient["allergies"]]:
            errors.append(f"{patient_name}: Allergie √† {prescribed_med} !")
            continue
        
        # V√©rifier les interactions avec traitements actuels
        for traitement in patient["traitements_actuels"]:
            if "Anticoagulant" in traitement and prescribed_med in ["Aspirine", "Ibuprof√®ne"]:
                errors.append(f"{patient_name}: {prescribed_med} interagit avec {traitement}")
                continue
            if "Sertraline" in traitement and prescribed_med == "Sumatriptan":
                errors.append(f"{patient_name}: Interaction dangereuse Sumatriptan + antid√©presseur")
                continue
        
        # V√©rifier grossesse pour Clara
        if patient_name == "Clara" and prescribed_med in ["Ibuprof√®ne", "Aspirine", "Sumatriptan"]:
            errors.append(f"{patient_name}: {prescribed_med} contre-indiqu√© pendant la grossesse")
            continue
        
        # V√©rifier si le m√©dicament traite les sympt√¥mes
        patient_symptoms_keywords = " ".join(patient["symptomes"]).lower()
        med_indications = " ".join(med_info["indications"]).lower()
        
        symptom_match = False
        if "fi√®vre" in patient_symptoms_keywords and any(x in med_indications for x in ["fi√®vre", "douleur"]):
            symptom_match = True
        elif "douleur" in patient_symptoms_keywords and "douleur" in med_indications:
            symptom_match = True
        elif "toux" in patient_symptoms_keywords and "toux" in med_indications:
            symptom_match = True
        elif "fatigue" in patient_symptoms_keywords and any(x in med_indications for x in ["fatigue", "stress"]):
            symptom_match = True
        elif "migraine" in patient_symptoms_keywords and any(x in med_indications for x in ["migraine", "douleur"]):
            symptom_match = True
        elif "maux de t√™te" in patient_symptoms_keywords and any(x in med_indications for x in ["douleur", "maux"]):
            symptom_match = True
        
        if not symptom_match:
            errors.append(f"{patient_name}: {prescribed_med} ne traite pas les sympt√¥mes pr√©sents")
    
    if errors:
        return False, "Erreurs d√©tect√©es:\n‚Ä¢ " + "\n‚Ä¢ ".join(errors[:3])  # Limite √† 3 erreurs pour lisibilit√©
    
    # V√©rifier si c'est exactement la solution optimale
    correct_count = sum(1 for name, med in prescriptions.items() if med == solution.get(name))
    total = len(solution)
    
    if correct_count == total:
        return True, "üéâ Prescriptions parfaites ! Tous les patients sont trait√©s de mani√®re optimale."
    elif correct_count >= total * 0.8:  # 80% de bonnes r√©ponses
        return True, f"‚úÖ Prescriptions acceptables ({correct_count}/{total} optimales). Patients trait√©s en s√©curit√©."
    else:
        return False, f"Prescriptions sous-optimales ({correct_count}/{total}). R√©visez les contre-indications et interactions."
    
# --------- ROOM 3: HYDRATATION ET TEMP√âRATURE üå°Ô∏èüíß ---------
# Puzzle complexe avec calculs, graphiques et monitoring patients
def room3_get_hydration_data() -> Dict[str, Any]:
    """Retourne les donn√©es pour l'√©preuve hydratation/temp√©rature complexe"""
    patients_data = [
        {
            "nom": "Alice",
            "age": 34,
            "poids": 65,
            "temperature": 38.8,
            "facteur_fievre": 950,  # (38.8-37) * 500 = 950ml
            "pathologie": "Grippe saisonni√®re",
            "hydratation_actuelle": 1.2
        },
        {
            "nom": "Bob",
            "age": 72,
            "poids": 78,
            "temperature": 39.4,
            "facteur_fievre": 1200,  # (39.4-37) * 500 = 1200ml
            "pathologie": "Insuffisance cardiaque",
            "hydratation_actuelle": 0.9
        },
        {
            "nom": "Clara",
            "age": 28,
            "poids": 58,
            "temperature": 37.1,
            "facteur_fievre": 0,  # Temp√©rature normale
            "pathologie": "Diab√®te",
            "hydratation_actuelle": 2.2
        },
        {
            "nom": "Daniel",
            "age": 45,
            "poids": 85,
            "temperature": 40.1,
            "facteur_fievre": 1550,  # (40.1-37) * 500 = 1550ml
            "pathologie": "Infection",
            "hydratation_actuelle": 1.1
        },
        {
            "nom": "Emma",
            "age": 19,
            "poids": 52,
            "temperature": 36.7,
            "facteur_fievre": 0,  # Temp√©rature normale
            "pathologie": "Diab√®te",
            "hydratation_actuelle": 1.8
        }
    ]

    return {
        "patients": patients_data,
        "options_calcul": [1.0, 1.5, 2.0, 2.5, 2.8, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0],
        "r√®gles": {
            "36.1-37.2¬∞C": "Temp√©rature normale, hydratation standard",
            "37.3-38.0¬∞C": "Temp√©rature l√©g√®rement √©lev√©e",
            "38.1-39.0¬∞C": "Fi√®vre mod√©r√©e, augmenter l'hydratation",
            "39.1-40.0¬∞C": "Forte fi√®vre, hydratation intensive requise"
        }
    }

def room3_validate_hydration(hydration_choices: Dict[str, float]) -> Tuple[bool, str]:
    """Valide les choix d'hydratation avec calculs m√©dicaux"""
    # Solutions attendues bas√©es sur les calculs m√©dicaux
    solutions = {
        "Alice": 2.8,    # 65kg √ó 30ml = 1950ml + fi√®vre (950ml) = 2900ml ‚âà 2.9L, ajust√© √† 2.8L
        "Bob": 4.5,      # 78kg √ó 30ml = 2340ml + fi√®vre (1200ml) + √¢ge (-10%) + insuffisance cardiaque (-20%) ‚âà 4.5L
        "Clara": 2.8,    # 58kg √ó 30ml = 1740ml + diab√®te (+10%) = 1914ml ‚âà 1.9L, mais ajust√© pour diab√®te
        "Daniel": 6.5,   # 85kg √ó 30ml = 2550ml + fi√®vre (1550ml) + infection (+15%) ‚âà 6.5L
        "Emma": 2.5       # 52kg √ó 30ml = 1560ml + diab√®te (+10%) ‚âà 1.7L, ajust√©
    }

    correct_count = 0
    total_patients = len(solutions)
    tolerance = 0.3  # Tol√©rance de ¬±0.3L

    results = []

    for patient_name, prescribed_hydration in hydration_choices.items():
        if patient_name not in solutions:
            return False, f"Patient {patient_name} inconnu"

        expected_hydration = solutions[patient_name]

        if abs(prescribed_hydration - expected_hydration) <= tolerance:
            correct_count += 1
            results.append(f"‚úÖ {patient_name}: {prescribed_hydration}L correct")
        else:
            results.append(f"‚ùå {patient_name}: {prescribed_hydration}L (attendu: {expected_hydration}L)")

    success_rate = correct_count / total_patients

    if success_rate == 1.0:
        return True, "üéâ Parfait ! Tous les patients sont correctement hydrat√©s."
    elif success_rate >= 0.8:
        return True, f"‚úÖ Prescriptions acceptables ({correct_count}/{total_patients} correctes)."
    else:
        return False, f"Calculs insuffisants ({correct_count}/{total_patients}). Utilisez la calculatrice m√©dicale."
    
def room3_get_calculation_hints() -> Dict[str, str]:
    """Retourne les indices de calcul d√©taill√©s"""
    return {
        "etape1": "1Ô∏è‚É£ Calculer besoins de base: Poids √ó 30-35 mL/kg",
        "etape2": "2Ô∏è‚É£ Ajouter suppl√©ment fi√®vre: (Temp-37¬∞C) √ó 500mL",
        "etape3": "3Ô∏è‚É£ Correction √¢ge: +15% si >65 ans",
        "etape4": "4Ô∏è‚É£ Correction pathologie: Diab√®te insipide +60%, Sepsis +50%",
        "etape5": "5Ô∏è‚É£ V√©rifier avec diur√®se: Normal = 1500-2000mL/24h"
    }

# --------- ROOM 4: ANALYSE G√âN√âTIQUE ET MUTATIONS VIRALES üß¨ ---------
# Puzzle complexe d'analyse de s√©quences g√©n√©tiques avec indices cach√©s
def room4_get_genetic_data() -> Dict[str, Any]:
    """Retourne les donn√©es pour l'√©preuve d'analyse g√©n√©tique du virus"""
    return {
        "patients_infectes": [
            {
                "identifiant": "PAT-A001",
                "nom": "Dr. Adams, Sarah",
                "age": 34,
                "fonction": "Virologue senior",
                "statut": "Patient z√©ro - Premier cas confirm√©",
                "sequence_partielle": "ADENINE_START",
                "poids_moleculaire": 331.22,  # Indice : 331 -> 3 (position dans s√©quence), 31 -> inverse = 13, 1->A, 3->C
                "temperature_echantillon": 4.0,  # Conservation √† 4¬∞C
                "taux_mutation": 0.12,
                "localisation": "Laboratoire P4 - Secteur A",
                "heure_prelevement": "08:31",  # Indice cach√© : 8->H, 31->CF en hexad√©cimal
                "analyse_complete": "Fragment viral d√©tect√© dans √©chantillon sanguin. S√©quence partielle : A---. Liaison hydrog√®ne stable. Compl√©mentarit√© avec Thymine confirm√©e. Structure purine avec cycle double. Patient pr√©sente sympt√¥mes neurologiques aigus.",
                "indices_caches": {
                    "nucleotide": "A",
                    "position_finale": 1,  # Premier nucl√©otide
                    "complement": "T",
                    "structure": "Purine (double cycle)",
                    "liaisons_h": 2
                }
            },
            {
                "identifiant": "PAT-T002", 
                "nom": "Pr. Taylor, Michael",
                "age": 67,
                "fonction": "Chef du d√©partement d'infectiologie",
                "statut": "Contamination secondaire - Contact direct patient z√©ro",
                "sequence_partielle": "THYMINE_BLOCK",
                "poids_moleculaire": 322.20,  # Indice : 3->C, 22->V, 2->B, 20->T
                "temperature_echantillon": 37.0,  # Temp√©rature corporelle normale
                "taux_mutation": 0.24,
                "localisation": "Service infectiologie - Chambre 237",
                "heure_prelevement": "14:37",  # Indice : 14->E, 37->% en ASCII proche
                "analyse_complete": "Mutation virale confirm√©e. S√©quence fragment√©e : -T--. Structure pyrimidine avec cycle simple identifi√©e. Appariement avec Ad√©nine v√©rifi√©. Patient sous ventilation assist√©e. R√©plication virale active dans les cellules pulmonaires. Pronostic r√©serv√©.",
                "indices_caches": {
                    "nucleotide": "T", 
                    "position_finale": 2,  # Deuxi√®me nucl√©otide
                    "complement": "A",
                    "structure": "Pyrimidine (cycle simple)",
                    "liaisons_h": 2
                }
            },
            {
                "identifiant": "PAT-C003",
                "nom": "Dr. Chen, Wei-Lin", 
                "age": 29,
                "fonction": "Interne en biologie mol√©culaire",
                "statut": "Exposition accidentelle - Manipulation √©chantillon",
                "sequence_partielle": "CYTOSINE_FRAG",
                "poids_moleculaire": 305.18,  # Indice complexe : 305->C0E en hex, 18->12 en hex
                "temperature_echantillon": -80.0,  # Cong√©lation ultra-basse
                "taux_mutation": 0.18,
                "localisation": "Laboratoire g√©nomique - Niveau B3",
                "heure_prelevement": "22:18",  # Indice : 22->V, 18->S
                "analyse_complete": "S√©quence virale partiellement d√©grad√©e : --C-. Structure pyrimidine modifi√©e d√©tect√©e. Triple liaison hydrog√®ne avec Guanine confirm√©e. Stabilit√© thermique √©lev√©e observ√©e. Patient asymptomatique mais porteur. Charge virale faible mais d√©tectable. Surveillance quotidienne n√©cessaire.",
                "indices_caches": {
                    "nucleotide": "C",
                    "position_finale": 3,  # Troisi√®me nucl√©otide  
                    "complement": "G",
                    "structure": "Pyrimidine (amino-groupe)",
                    "liaisons_h": 3
                }
            },
            {
                "identifiant": "PAT-G004",
                "nom": "Dr. Garcia, Elena",
                "age": 42, 
                "fonction": "√âpid√©miologiste",
                "statut": "Contamination nosocomiale - Transmission a√©roport√©e",
                "sequence_partielle": "GUANINE_END",
                "poids_moleculaire": 347.22,  # Indice : 347->14B en hex, 22->16 en hex
                "temperature_echantillon": 25.0,  # Temp√©rature ambiante
                "taux_mutation": 0.31,
                "localisation": "Bureau √©pid√©miologie - Aile ouest",
                "heure_prelevement": "16:47",  # Indice : 16->G, 47->/ proche en ASCII
                "analyse_complete": "S√©quence compl√®te en cours : ---G. Structure purine avec groupe amino identifi√©e. Compl√©mentarit√© parfaite avec Cytosine v√©rifi√©e. Triple liaison hydrog√®ne stable. Patient pr√©sente fi√®vre intermittente et c√©phal√©es. Traitement antiviral prophylactique initi√©. √âvolution favorable attendue.",
                "indices_caches": {
                    "nucleotide": "G",
                    "position_finale": 4,  # Quatri√®me nucl√©otide
                    "complement": "C", 
                    "structure": "Purine (groupe amino)",
                    "liaisons_h": 3
                }
            }
        ],
        "outils_analyse": {
            "microscope_electronique": {
                "resolution": "0.1 nanom√®tre",
                "utilisation": "Visualisation structure mol√©culaire",
                "disponible": True
            },
            "sequenceur_adn": {
                "precision": "99.9%",
                "vitesse": "2 Mb/h", 
                "utilisation": "S√©quen√ßage complet g√©nome viral",
                "disponible": False,
                "erreur": "ERREUR SYST√àME : Corruption des donn√©es de r√©f√©rence"
            },
            "pcr_quantitative": {
                "sensibilite": "1 copie/ŒºL",
                "utilisation": "Amplification et quantification s√©quences",
                "disponible": True
            },
            "base_donnees_genbank": {
                "acces": "Limit√© - Connexion instable",
                "sequences_reference": "Partiellement corrompues",
                "disponible": False
            }
        },
        "indices_laboratoire": [
            "üß¨ La s√©quence virale compl√®te est cod√©e dans l'ordre des identifiants patients",
            "üî¨ Les poids mol√©culaires contiennent des indices cach√©s en conversion hexad√©cimale", 
            "‚è∞ Les heures de pr√©l√®vement r√©v√®lent l'ordre de priorit√© d'analyse",
            "üå°Ô∏è Les temp√©ratures d'√©chantillon indiquent la stabilit√© des liaisons",
            "üë• L'ordre d'infection suit la propagation naturelle du virus : A‚ÜíT puis C‚ÜíG",
            "üß™ Les compl√©mentarit√©s Watson-Crick sont la cl√© : A-T (2 liaisons) et C-G (3 liaisons)",
            "üí° La position finale de chaque nucl√©otide est cach√©e dans les donn√©es patients"
        ],
        "regles_genetiques": {
            "appariement_watson_crick": {
                "A": "T", "T": "A", "C": "G", "G": "C"
            },
            "liaisons_hydrogene": {
                "A-T": 2, "T-A": 2, "C-G": 3, "G-C": 3
            },
            "classification": {
                "purines": ["A", "G"],  # Double cycle
                "pyrimidines": ["T", "C"]  # Simple cycle
            }
        },
        "sequence_complete_attendue": "ATCG",
        "explication_solution": {
            "methode": "Analyse des indices crois√©s dans les dossiers patients",
            "etapes": [
                "1. Identifier le nucl√©otide de chaque patient (A, T, C, G)",
                "2. Extraire la position finale des indices cach√©s", 
                "3. Ordonner selon position : PAT-A001(pos=1), PAT-T002(pos=2), PAT-C003(pos=3), PAT-G004(pos=4)",
                "4. Construire la s√©quence : A-T-C-G",
                "5. V√©rifier les compl√©mentarit√©s Watson-Crick"
            ]
        }
    }

def room4_validate_genetic_sequence(sequence_input: str) -> Tuple[bool, str]:
    """Valide la s√©quence g√©n√©tique reconstitu√©e avec analyse d√©taill√©e"""
    data = room4_get_genetic_data()
    expected_sequence = data["sequence_complete_attendue"]
    
    # Nettoyer et normaliser l'input
    cleaned_sequence = sequence_input.strip().upper().replace(" ", "").replace("-", "")
    
    # V√©rification de base
    if not cleaned_sequence:
        return False, "‚ö†Ô∏è Erreur : S√©quence vide. Veuillez entrer une s√©quence de nucl√©otides."
    
    if len(cleaned_sequence) != 4:
        return False, f"‚ö†Ô∏è Erreur : S√©quence de longueur incorrecte ({len(cleaned_sequence)}). La s√©quence virale compl√®te doit contenir exactement 4 nucl√©otides."
    
    # V√©rifier que seuls A, T, C, G sont utilis√©s
    valid_nucleotides = set("ATCG")
    invalid_chars = set(cleaned_sequence) - valid_nucleotides
    if invalid_chars:
        return False, f"‚ö†Ô∏è Erreur : Caract√®res invalides d√©tect√©s : {', '.join(invalid_chars)}. Utilisez uniquement A, T, C, G."
    
    # V√©rifier la s√©quence compl√®te
    if cleaned_sequence == expected_sequence:
        return True, "üéâ S√âQUENCE VIRALE IDENTIFI√âE ! Le g√©nome complet du virus a √©t√© reconstitu√© : ATCG. Propagation virale simul√©e avec succ√®s. Acc√®s au laboratoire de niveau 5 autoris√©. Tous les patients peuvent maintenant √™tre trait√©s efficacement."
    
    # Messages d'aide progressifs selon l'erreur
    correct_positions = sum(1 for i, nucleotide in enumerate(cleaned_sequence) if i < len(expected_sequence) and nucleotide == expected_sequence[i])
    
    if cleaned_sequence == expected_sequence[::-1]:  # S√©quence invers√©e
        return False, "‚ö†Ô∏è S√©quence invers√©e d√©tect√©e. Les nucl√©otides sont corrects mais dans l'ordre inverse. R√©analysez les indices de position dans les dossiers patients (PAT-A001, PAT-T002, etc.)."
    
    if set(cleaned_sequence) == set(expected_sequence):  # Bonnes lettres, mauvais ordre
        return False, f"‚ö†Ô∏è Nucl√©otides corrects mais s√©quence d√©sordonn√©e ({correct_positions}/4 positions correctes). Examinez attentivement les indices cach√©s : poids mol√©culaires, heures de pr√©l√®vement, et identifiants patients."
    
    # Suggestions selon les erreurs communes
    if "CGTA" in cleaned_sequence:
        return False, "‚ö†Ô∏è S√©quence proche mais incorrecte. V√©rifiez l'ordre d'infection et la propagation virale naturelle. Les purines (A,G) et pyrimidines (T,C) suivent un pattern sp√©cifique."
    
    if correct_positions >= 2:
        return False, f"‚ö†Ô∏è S√©quence partiellement correcte ({correct_positions}/4 positions). R√©examinez les dossiers des patients restants. Concentration sur les indices des temp√©ratures d'√©chantillon et liaisons hydrog√®ne."
    
    return False, f"‚ùå S√©quence incorrecte : {cleaned_sequence}. Analysez syst√©matiquement chaque dossier patient. Cherchez les indices dans : identifiants (PAT-X00Y), poids mol√©culaires, heures de pr√©l√®vement, et compl√©mentarit√©s Watson-Crick."

# --------- ROOM 5: LABORATOIRE DE CONFINEMENT BIOLOGIQUE ü¶† ---------
# Enigme d'escape game : D√©chiffrer les codes de quarantaine

def room5_get_containment_data() -> Dict[str, Any]:
    """Retourne les donn√©es pour l'√©preuve de confinement biologique"""
    return {
        "situation_critique": {
            "titre": "ü¶† LABORATOIRE P4 - BREACH DE CONFINEMENT",
            "description": "Le virus a mut√© et s'est √©chapp√© du laboratoire de confinement de niveau 4. Les syst√®mes de quarantaine automatique se sont activ√©s, vous enfermant √† l'int√©rieur. Vous devez d√©chiffrer les codes d'urgence pour d√©verrouiller les sas de s√©curit√© avant que l'air ne soit purg√©.",
            "temps_limite": 300,  # 5 minutes
            "enjeu": "√âchec = Activation du protocole de purge - √âlimination de toute vie dans le laboratoire"
        },
        
        "indices_laboratoire": [
            {
                "source": "ÔøΩ Microscope √©lectronique",
                "message": "ECHANTILLON_042: Structure virale hexagonale d√©tect√©e. Taille: 120nm. Pattern g√©om√©trique : les angles internes totalisent 720¬∞. Chaque c√¥t√© mesure 20nm. INDICE: La forme r√©v√®le le premier chiffre.",
                "indice_cache": "6",  # Hexagone = 6 c√¥t√©s
                "explication": "Hexagone = 6 c√¥t√©s, premier chiffre du code"
            },
            {
                "source": "üìä Analyseur spectroscopique",
                "message": "RAPPORT_FREQ: Fr√©quence de r√©sonance virale = 2847 Hz. Harmoniques d√©tect√©es √† 2x, 3x et 4x la fr√©quence fondamentale. Les m√©decins utilisent cette fr√©quence depuis 1847 pour st√©riliser. INDICE: L'ann√©e r√©v√®le le deuxi√®me chiffre.",
                "indice_cache": "8",  # 1847 -> dernier chiffre significatif m√©dical
                "explication": "1847 = ann√©e de d√©couverte des antiseptiques par Semmelweis, chiffre 8"
            },
            {
                "source": "üß™ Centrifugeuse automatique",
                "message": "PROTOCOLE_SPIN: Vitesse de s√©paration = 3000 RPM. Temps de cycle = 15 minutes. Force centrifuge = 1500g. Tubes dispos√©s en cercle parfait. INDICE: Le nombre de tubes standard r√©v√®le le troisi√®me chiffre.",
                "indice_cache": "4",  # 4 tubes standard en centrifugeuse m√©dicale
                "explication": "Configuration standard = 4 tubes, troisi√®me chiffre"
            },
            {
                "source": "üå°Ô∏è Moniteur temp√©rature cryog√©nique", 
                "message": "ALERTE_TEMP: √âchantillons conserv√©s √† -196¬∞C (azote liquide). Seuil critique: -180¬∞C. Temps avant d√©gradation: 120 minutes. Container: format cubique. INDICE: Les faces du container r√©v√®lent le quatri√®me chiffre.",
                "indice_cache": "6",  # Cube = 6 faces
                "explication": "Cube de stockage = 6 faces, quatri√®me chiffre"
            },
            {
                "source": "ÔøΩ Syst√®me injection automatique",
                "message": "CONFIG_DOSE: Seringues pr√™tes = 9 unit√©s. Volume unitaire = 5mL. Pression = 2 bars. D√©lai entre injections = 30 secondes. INDICE: Le total des seringues moins la pression r√©v√®le le cinqui√®me chiffre.",
                "indice_cache": "7",  # 9 seringues - 2 bars = 7
                "explication": "9 seringues - 2 bars de pression = 7, cinqui√®me chiffre"
            }
        ],
        
        "equipements_bloques": {
            "sas_principal": "üîí VERROUILL√â - Code d'urgence requis",
            "ventilation": "‚è∏Ô∏è EN ATTENTE - Purge dans 5 minutes",  
            "systeme_communication": "üì° ISOL√â - Appels d'urgence bloqu√©s",
            "eclairage_secours": "üîã AUTONOMIE 4 MIN - Batterie faible",
            "detecteurs_bio": "ÔøΩ ACTIFS - Contamination d√©tect√©e niveau 4"
        },
        
        "code_sequence": "68467",  # Code final bas√© sur les 5 indices
        
        "consequences_echec": [
            "ÔøΩ Activation du protocole de purge automatique",
            "‚ò£Ô∏è √âlimination de toute forme de vie dans le laboratoire",
            "üî• Incin√©ration compl√®te des √©chantillons et du personnel",
            "üö´ Scellement permanent du laboratoire P4",
            "üì∞ Couverture m√©diatique catastrophique",
            "‚öñÔ∏è Enqu√™te internationale sur la s√©curit√© biologique"
        ],
        
        "procedure_evacuation": {
            "etape_1": "Saisir le code de d√©verrouillage d'urgence (5 chiffres)",
            "etape_2": "Activer la s√©quence de d√©contamination", 
            "etape_3": "√âvacuer par le sas de s√©curit√© principal",
            "etape_4": "D√©clencher l'alerte de confinement externe"
        }
    }

def room5_validate_containment_code(code_input: str, start_ts: int, now_ts: int) -> Tuple[bool, str]:
    """Valide le code de confinement avec analyse des indices"""
    data = room5_get_containment_data()
    correct_code = data["code_sequence"]
    
    # V√©rification du temps (5 minutes = 300 secondes)
    if start_ts is None or (now_ts - start_ts) > 300:
        temps_ecoule = (now_ts - start_ts) if start_ts else 0
        return False, f"üíÄ PROTOCOLE DE PURGE ACTIV√â ! Temps d√©pass√© ({temps_ecoule//60}m {temps_ecoule%60}s / 5m). L'air du laboratoire est purg√©. Vous √™tes √©limin√© avec tous les √©chantillons viraux. Mission √©chou√©e."
    
    # Nettoyer l'input
    cleaned_code = code_input.strip().replace(" ", "").replace("-", "")
    
    # V√©rifications de base
    if not cleaned_code:
        return False, "‚ö†Ô∏è ERREUR : Code vide. Saisissez le code de d√©verrouillage d'urgence (5 chiffres)."
    
    if len(cleaned_code) != 5:
        return False, f"‚ö†Ô∏è ERREUR : Code de longueur incorrecte ({len(cleaned_code)} chiffres). Le code d'urgence doit contenir exactement 5 chiffres."
    
    if not cleaned_code.isdigit():
        return False, "‚ö†Ô∏è ERREUR : Code invalide. Utilisez uniquement des chiffres (0-9)."
    
    # V√©rification du code complet
    if cleaned_code == correct_code:
        temps_utilise = now_ts - start_ts
        return True, f"üéâ √âVACUATION R√âUSSIE ! Code de confinement valid√© : {correct_code}. Temps d'√©vasion: {temps_utilise//60}m {temps_utilise%60}s. Les sas de s√©curit√© s'ouvrent ! Vous vous √©chappez du laboratoire P4 juste avant la purge automatique. Le virus reste confin√©. Vous avez sauv√© l'humanit√© !"
    
    # Analyse des erreurs partielles pour aider
    correct_positions = sum(1 for i, digit in enumerate(cleaned_code) if i < len(correct_code) and digit == correct_code[i])
    
    if correct_positions >= 4:
        return False, f"üîì PRESQUE ! {correct_positions}/5 chiffres corrects en bonne position. Un seul chiffre incorrect. R√©examinez attentivement les indices des √©quipements de laboratoire."
    
    elif correct_positions >= 3:
        return False, f"‚ö° PROCHE ! {correct_positions}/5 chiffres corrects. V√©rifiez les calculs dans les rapports d'analyse. Chaque √©quipement r√©v√®le un chiffre sp√©cifique."
    
    elif correct_positions >= 2:
        return False, f"üß™ PARTIELLEMENT CORRECT ! {correct_positions}/5 chiffres en bonne position. Analysez syst√©matiquement chaque indice : formes g√©om√©triques, ann√©es historiques, configurations standard."
    
    elif correct_positions == 1:
        return False, f"üî¨ UN D√âBUT ! {correct_positions}/5 chiffre correct. Relisez attentivement tous les messages des √©quipements. Les indices sont cach√©s dans les d√©tails techniques."
    
    else:
        return False, f"‚ùå CODE INCORRECT : {cleaned_code}. Aucun chiffre correct. Examinez m√©ticuleusement chaque rapport d'√©quipement. Les 5 indices r√©v√®lent chaque chiffre dans l'ordre."

# Maintenir compatibilit√© avec l'ancien syst√®me  
FINAL_QUESTIONS = []  # Vide car maintenant c'est un code √† saisir
room5_check_answers = lambda answers, start_ts, now_ts: room5_validate_containment_code(answers[0] if answers else "", start_ts, now_ts)

# --------- ROOM 6: CHAMBRE D'ISOLATION DU PATIENT Z√âRO üè• ---------
# Enigme d'escape game finale : Cr√©er l'antidote ultime

def room6_get_patient_zero_data() -> Dict[str, Any]:
    """Retourne les donn√©es pour l'√©preuve finale du patient z√©ro"""
    return {
        "situation_finale": {
            "titre": "üè• CHAMBRE D'ISOLATION - PATIENT Z√âRO CRITIQUE",
            "description": "Vous √™tes dans la chambre du patient z√©ro, source de l'√©pid√©mie. Son √©tat se d√©grade rapidement. Vous devez analyser son ADN viral, d√©chiffrer les mutations et synth√©tiser l'antidote parfait avant qu'il ne soit trop tard. C'est votre derni√®re chance de sauver l'humanit√©.",
            "temps_limite": 420,  # 7 minutes
            "enjeu": "√âchec = Mort du patient z√©ro et propagation mondiale incontr√¥lable"
        },
        
        "patient_zero_vitals": {
            "nom": "Dr. Alexander Petrov",
            "age": 52,
            "profession": "Virologue en chef - Laboratoire d'origine",
            "statut": "CRITIQUE - D√©faillance multi-organique imminente",
            "temps_restant": "7 minutes avant coma irr√©versible",
            "symptomes": [
                "Fi√®vre 42.3¬∞C (seuil l√©tal)",
                "Saturation O2: 78% (critique)", 
                "Rythme cardiaque: 156 bpm (tachycardie s√©v√®re)",
                "Pression art√©rielle: 220/140 (urgence hypertensive)",
                "Conscience: confuse, d√©lire viral"
            ]
        },
        
        "indices_adn_viral": [
            {
                "source": "üß¨ S√©quenceur g√©n√©tique principal",
                "mutation_detectee": "SEGMENT_ALPHA",
                "sequence_originale": "ATCG-GCAT-TACG",
                "sequence_mutee": "CTAG-GCTA-TACG", 
                "analyse": "Inversion des 4 premiers nucl√©otides. Facteur de virulence x3. R√©sistance aux antiviraux standard. INDICE: Pour neutraliser, inverser la premi√®re mutation.",
                "antidote_partiel": "ATCG",  # Inversion de CTAG
                "position_antidote": 1
            },
            {
                "source": "üî¨ Microscope confocal avanc√©", 
                "mutation_detectee": "SEGMENT_BETA",
                "sequence_originale": "CGTA-ATGC-CCGT",
                "sequence_mutee": "CGTA-TACG-CCGT",
                "analyse": "Substitution nucl√©otidique en position centrale. √âchappement immunitaire activ√©. Cytokine storm d√©clench√©. INDICE: Restaurer la s√©quence originale du milieu.",
                "antidote_partiel": "ATGC",  # S√©quence originale du milieu  
                "position_antidote": 2
            },
            {
                "source": "‚öóÔ∏è Analyseur prot√©omique",
                "mutation_detectee": "SEGMENT_GAMMA", 
                "sequence_originale": "TTAA-GGCC-ATCG",
                "sequence_mutee": "TTAA-GGCC-CGTA",
                "analyse": "Permutation circulaire finale. Prot√©ine de surface alt√©r√©e. Capacit√© d'infection x10. L√©talit√© 95%. INDICE: R√©tablir la configuration originale de fin.",
                "antidote_partiel": "ATCG",  # S√©quence originale de fin
                "position_antidote": 3
            }
        ],
        
        "formule_antidote": {
            "sequence_complete": "ATCG-ATGC-ATCG",  # Combinaison des 3 antidotes partiels
            "methode_synthese": [
                "1Ô∏è‚É£ Analyser les 3 mutations virales d√©tect√©es",
                "2Ô∏è‚É£ Pour chaque segment mut√©, identifier la correction n√©cessaire", 
                "3Ô∏è‚É£ Segment Alpha: Inverser CTAG ‚Üí ATCG",
                "4Ô∏è‚É£ Segment Beta: Restaurer TACG ‚Üí ATGC", 
                "5Ô∏è‚É£ Segment Gamma: Corriger CGTA ‚Üí ATCG",
                "6Ô∏è‚É£ Combiner les 3 corrections: ATCG-ATGC-ATCG"
            ],
            "format_attendu": "ATCG-ATGC-ATCG",
            "separateur": "-"
        },
        
        "equipements_medicaux": {
            "respirateur": "‚ö†Ô∏è SURCHARGE - Patient en d√©tresse respiratoire",
            "dialyse": "üîÑ ACTIF - Filtration toxines virales", 
            "perfusion": "üíâ DEBIT MAX - Cocktail de survie perfus√©",
            "moniteur_cardiaque": "üìà ALARME - Arythmie critique d√©tect√©e",
            "scanner_cerebral": "üß† OEDEME - Pression intracr√¢nienne √©lev√©e"
        },
        
        "laboratoire_urgence": {
            "synthese_moleculaire": "üß™ OPERATIONNEL - Pr√™t pour antidote",
            "culture_cellulaire": "ü¶† CONTAMINEES - √âchantillons viraux actifs",
            "centrifugeuse_haute": "‚ö° EN MARCHE - Purification en cours",
            "microscope_tunnel": "üî¨ ANALYSE - Structure virale temps r√©el", 
            "incubateur_sterile": "üå°Ô∏è 37¬∞C - Conditions optimales maintenues"
        },
        
        "consequences_echec": [
            "üíÄ Mort du patient z√©ro dans 7 minutes",
            "üåç Perte du seul espoir d'antidote universel",  
            "ü¶† Propagation virale mondiale incontr√¥lable",
            "‚ö∞Ô∏è Extinction probable de l'humanit√© en 30 jours",
            "üè• Effondrement des syst√®mes de sant√© mondiaux",
            "üö® Activation des protocoles d'urgence militaire"
        ]
    }

def room6_validate_antidote_formula(formula_input: str, start_ts: int, now_ts: int) -> Tuple[bool, str]:
    """Valide la formule d'antidote final avec analyse des mutations"""
    data = room6_get_patient_zero_data()
    correct_formula = data["formule_antidote"]["sequence_complete"]
    
    # V√©rification du temps (7 minutes = 420 secondes)
    if start_ts is None or (now_ts - start_ts) > 420:
        temps_ecoule = (now_ts - start_ts) if start_ts else 0
        return False, f"üíÄ PATIENT Z√âRO D√âC√âD√â ! Temps d√©pass√© ({temps_ecoule//60}m {temps_ecoule%60}s / 7m). Le Dr Petrov sombre dans un coma irr√©versible. L'antidote ne peut plus √™tre test√©. L'humanit√© est condamn√©e √† l'extinction virale."
    
    # Nettoyer l'input
    cleaned_formula = formula_input.strip().upper().replace(" ", "")
    
    # V√©rifications de base
    if not cleaned_formula:
        return False, "‚ö†Ô∏è ERREUR : Formule vide. Saisissez la s√©quence d'antidote compl√®te (format: XXXX-XXXX-XXXX)."
    
    # V√©rifier le format avec tirets
    if not any(sep in cleaned_formula for sep in ['-', '_', '|', ':']):
        return False, "‚ö†Ô∏è ERREUR FORMAT : S√©quence doit √™tre s√©par√©e en 3 segments (utilisez des tirets: XXXX-XXXX-XXXX)."
    
    # Normaliser les s√©parateurs
    for sep in ['_', '|', ':', ' ']:
        cleaned_formula = cleaned_formula.replace(sep, '-')
    
    # V√©rifier structure
    segments = cleaned_formula.split('-')
    if len(segments) != 3:
        return False, f"‚ö†Ô∏è ERREUR : {len(segments)} segments d√©tect√©s. L'antidote n√©cessite exactement 3 segments correctifs (un par mutation)."
    
    # V√©rifier chaque segment
    for i, segment in enumerate(segments):
        if len(segment) != 4:
            return False, f"‚ö†Ô∏è SEGMENT {i+1} INVALIDE : {len(segment)} nucl√©otides. Chaque segment doit contenir 4 nucl√©otides (A,T,C,G)."
        
        if not all(c in 'ATCG' for c in segment):
            invalid_chars = set(segment) - set('ATCG')
            return False, f"‚ö†Ô∏è SEGMENT {i+1} CORROMPU : Caract√®res invalides {invalid_chars}. Utilisez uniquement A, T, C, G."
    
    # V√©rification finale
    if cleaned_formula == correct_formula:
        temps_utilise = now_ts - start_ts
        return True, f"üéâ ANTIDOTE SYNTH√âTIS√â AVEC SUCC√àS ! Formule valid√©e: {correct_formula}. Temps record: {temps_utilise//60}m {temps_utilise%60}s. Vous injectez l'antidote au Dr Petrov... Sa fi√®vre chute imm√©diatement ! Les signes vitaux se stabilisent ! L'humanit√© est sauv√©e ! Vous √™tes le h√©ros qui a stopp√© la pand√©mie mondiale !"
    
    # Analyse des erreurs par segment pour aider
    correct_segments = correct_formula.split('-')
    errors = []
    correct_count = 0
    
    for i, (user_seg, correct_seg) in enumerate(zip(segments, correct_segments)):
        if user_seg == correct_seg:
            correct_count += 1
        else:
            mutation_name = ["ALPHA", "BETA", "GAMMA"][i]
            errors.append(f"Segment {mutation_name}: {user_seg} ‚Üí devrait √™tre {correct_seg}")
    
    if correct_count == 2:
        return False, f"üß¨ TR√àS PROCHE ! {correct_count}/3 segments corrects. Un seul segment √† corriger:\n‚Ä¢ {errors[0]}\nRevisez l'analyse de cette mutation sp√©cifique."
    
    elif correct_count == 1:
        return False, f"‚öóÔ∏è PARTIELLEMENT CORRECT ! {correct_count}/3 segments valid√©s. Corrections n√©cessaires:\n‚Ä¢ {chr(10).join(errors[:2])}\nAnalysez les s√©quences originales vs mut√©es."
    
    else:
        return False, f"‚ùå ANTIDOTE INCORRECT : {cleaned_formula}. Aucun segment correct. Relisez attentivement les 3 analyses de mutations virales. Chaque segment doit corriger une mutation sp√©cifique (Alpha, Beta, Gamma)."
